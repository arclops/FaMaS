import {
  init_useRadioGroup,
  useRadioGroup
} from "./chunk-LISEKJQK.js";
import {
  SwitchBase_default,
  init_SwitchBase
} from "./chunk-ZL234EPC.js";
import {
  createChainedFunction_default,
  init_createChainedFunction
} from "./chunk-EMJ3GXR4.js";
import {
  createSvgIcon,
  init_createSvgIcon
} from "./chunk-RPU35HK3.js";
import {
  capitalize_default,
  init_capitalize
} from "./chunk-NRIK3BAE.js";
import {
  init_composeClasses
} from "./chunk-DLPLQCZE.js";
import {
  init_styled,
  rootShouldForwardProp,
  styled_default
} from "./chunk-KTWU52TS.js";
import {
  init_useThemeProps,
  useThemeProps
} from "./chunk-UECOC35K.js";
import {
  init_generateUtilityClass
} from "./chunk-3UBIB3NS.js";
import {
  alpha,
  init_esm as init_esm2
} from "./chunk-3L2STR3Y.js";
import {
  clsx_default,
  init_clsx
} from "./chunk-WMHIOIEL.js";
import {
  _objectWithoutPropertiesLoose,
  init_objectWithoutPropertiesLoose
} from "./chunk-L367Q5NJ.js";
import {
  composeClasses,
  generateUtilityClass,
  generateUtilityClasses,
  init_esm,
  refType_default
} from "./chunk-RQDDZ26F.js";
import {
  _extends,
  init_extends
} from "./chunk-HMTWVGVS.js";
import {
  require_jsx_runtime
} from "./chunk-VTQ2JCVL.js";
import {
  require_prop_types
} from "./chunk-Z7SDHLGG.js";
import {
  require_react
} from "./chunk-ZGRSIX2Q.js";
import {
  __esm,
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/@mui/material/internal/svg-icons/RadioButtonUnchecked.js
var React, import_jsx_runtime, RadioButtonUnchecked_default;
var init_RadioButtonUnchecked = __esm({
  "node_modules/@mui/material/internal/svg-icons/RadioButtonUnchecked.js"() {
    "use client";
    React = __toESM(require_react());
    init_createSvgIcon();
    import_jsx_runtime = __toESM(require_jsx_runtime());
    RadioButtonUnchecked_default = createSvgIcon((0, import_jsx_runtime.jsx)("path", {
      d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
    }), "RadioButtonUnchecked");
  }
});

// node_modules/@mui/material/internal/svg-icons/RadioButtonChecked.js
var React2, import_jsx_runtime2, RadioButtonChecked_default;
var init_RadioButtonChecked = __esm({
  "node_modules/@mui/material/internal/svg-icons/RadioButtonChecked.js"() {
    "use client";
    React2 = __toESM(require_react());
    init_createSvgIcon();
    import_jsx_runtime2 = __toESM(require_jsx_runtime());
    RadioButtonChecked_default = createSvgIcon((0, import_jsx_runtime2.jsx)("path", {
      d: "M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"
    }), "RadioButtonChecked");
  }
});

// node_modules/@mui/material/Radio/RadioButtonIcon.js
function RadioButtonIcon(props) {
  const {
    checked = false,
    classes = {},
    fontSize
  } = props;
  const ownerState = _extends({}, props, {
    checked
  });
  return (0, import_jsx_runtime4.jsxs)(RadioButtonIconRoot, {
    className: classes.root,
    ownerState,
    children: [(0, import_jsx_runtime3.jsx)(RadioButtonIconBackground, {
      fontSize,
      className: classes.background,
      ownerState
    }), (0, import_jsx_runtime3.jsx)(RadioButtonIconDot, {
      fontSize,
      className: classes.dot,
      ownerState
    })]
  });
}
var React3, import_prop_types, import_jsx_runtime3, import_jsx_runtime4, RadioButtonIconRoot, RadioButtonIconBackground, RadioButtonIconDot, RadioButtonIcon_default;
var init_RadioButtonIcon = __esm({
  "node_modules/@mui/material/Radio/RadioButtonIcon.js"() {
    "use client";
    init_extends();
    React3 = __toESM(require_react());
    import_prop_types = __toESM(require_prop_types());
    init_RadioButtonUnchecked();
    init_RadioButtonChecked();
    init_styled();
    import_jsx_runtime3 = __toESM(require_jsx_runtime());
    import_jsx_runtime4 = __toESM(require_jsx_runtime());
    RadioButtonIconRoot = styled_default("span", {
      shouldForwardProp: rootShouldForwardProp
    })({
      position: "relative",
      display: "flex"
    });
    RadioButtonIconBackground = styled_default(RadioButtonUnchecked_default)({
      // Scale applied to prevent dot misalignment in Safari
      transform: "scale(1)"
    });
    RadioButtonIconDot = styled_default(RadioButtonChecked_default)(({
      theme,
      ownerState
    }) => _extends({
      left: 0,
      position: "absolute",
      transform: "scale(0)",
      transition: theme.transitions.create("transform", {
        easing: theme.transitions.easing.easeIn,
        duration: theme.transitions.duration.shortest
      })
    }, ownerState.checked && {
      transform: "scale(1)",
      transition: theme.transitions.create("transform", {
        easing: theme.transitions.easing.easeOut,
        duration: theme.transitions.duration.shortest
      })
    }));
    true ? RadioButtonIcon.propTypes = {
      /**
       * If `true`, the component is checked.
       */
      checked: import_prop_types.default.bool,
      /**
       * Override or extend the styles applied to the component.
       * See [CSS API](#css) below for more details.
       */
      classes: import_prop_types.default.object,
      /**
       * The size of the component.
       * `small` is equivalent to the dense radio styling.
       */
      fontSize: import_prop_types.default.oneOf(["small", "medium"])
    } : void 0;
    RadioButtonIcon_default = RadioButtonIcon;
  }
});

// node_modules/@mui/material/Radio/radioClasses.js
function getRadioUtilityClass(slot) {
  return generateUtilityClass("MuiRadio", slot);
}
var radioClasses, radioClasses_default;
var init_radioClasses = __esm({
  "node_modules/@mui/material/Radio/radioClasses.js"() {
    init_esm();
    init_generateUtilityClass();
    radioClasses = generateUtilityClasses("MuiRadio", ["root", "checked", "disabled", "colorPrimary", "colorSecondary", "sizeSmall"]);
    radioClasses_default = radioClasses;
  }
});

// node_modules/@mui/material/Radio/Radio.js
function areEqualValues(a, b) {
  if (typeof b === "object" && b !== null) {
    return a === b;
  }
  return String(a) === String(b);
}
var React4, import_prop_types2, import_jsx_runtime5, _excluded, useUtilityClasses, RadioRoot, defaultCheckedIcon, defaultIcon, Radio, Radio_default;
var init_Radio = __esm({
  "node_modules/@mui/material/Radio/Radio.js"() {
    "use client";
    init_objectWithoutPropertiesLoose();
    init_extends();
    React4 = __toESM(require_react());
    import_prop_types2 = __toESM(require_prop_types());
    init_clsx();
    init_esm();
    init_composeClasses();
    init_esm2();
    init_SwitchBase();
    init_useThemeProps();
    init_RadioButtonIcon();
    init_capitalize();
    init_createChainedFunction();
    init_useRadioGroup();
    init_radioClasses();
    init_styled();
    import_jsx_runtime5 = __toESM(require_jsx_runtime());
    _excluded = ["checked", "checkedIcon", "color", "icon", "name", "onChange", "size", "className"];
    useUtilityClasses = (ownerState) => {
      const {
        classes,
        color,
        size
      } = ownerState;
      const slots = {
        root: ["root", `color${capitalize_default(color)}`, size !== "medium" && `size${capitalize_default(size)}`]
      };
      return _extends({}, classes, composeClasses(slots, getRadioUtilityClass, classes));
    };
    RadioRoot = styled_default(SwitchBase_default, {
      shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
      name: "MuiRadio",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.size !== "medium" && styles[`size${capitalize_default(ownerState.size)}`], styles[`color${capitalize_default(ownerState.color)}`]];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      color: (theme.vars || theme).palette.text.secondary
    }, !ownerState.disableRipple && {
      "&:hover": {
        backgroundColor: theme.vars ? `rgba(${ownerState.color === "default" ? theme.vars.palette.action.activeChannel : theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === "default" ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }
    }, ownerState.color !== "default" && {
      [`&.${radioClasses_default.checked}`]: {
        color: (theme.vars || theme).palette[ownerState.color].main
      }
    }, {
      [`&.${radioClasses_default.disabled}`]: {
        color: (theme.vars || theme).palette.action.disabled
      }
    }));
    defaultCheckedIcon = (0, import_jsx_runtime5.jsx)(RadioButtonIcon_default, {
      checked: true
    });
    defaultIcon = (0, import_jsx_runtime5.jsx)(RadioButtonIcon_default, {});
    Radio = React4.forwardRef(function Radio2(inProps, ref) {
      var _defaultIcon$props$fo, _defaultCheckedIcon$p;
      const props = useThemeProps({
        props: inProps,
        name: "MuiRadio"
      });
      const {
        checked: checkedProp,
        checkedIcon = defaultCheckedIcon,
        color = "primary",
        icon = defaultIcon,
        name: nameProp,
        onChange: onChangeProp,
        size = "medium",
        className
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
      const ownerState = _extends({}, props, {
        color,
        size
      });
      const classes = useUtilityClasses(ownerState);
      const radioGroup = useRadioGroup();
      let checked = checkedProp;
      const onChange = createChainedFunction_default(onChangeProp, radioGroup && radioGroup.onChange);
      let name = nameProp;
      if (radioGroup) {
        if (typeof checked === "undefined") {
          checked = areEqualValues(radioGroup.value, props.value);
        }
        if (typeof name === "undefined") {
          name = radioGroup.name;
        }
      }
      return (0, import_jsx_runtime5.jsx)(RadioRoot, _extends({
        type: "radio",
        icon: React4.cloneElement(icon, {
          fontSize: (_defaultIcon$props$fo = defaultIcon.props.fontSize) != null ? _defaultIcon$props$fo : size
        }),
        checkedIcon: React4.cloneElement(checkedIcon, {
          fontSize: (_defaultCheckedIcon$p = defaultCheckedIcon.props.fontSize) != null ? _defaultCheckedIcon$p : size
        }),
        ownerState,
        classes,
        name,
        checked,
        onChange,
        ref,
        className: clsx_default(classes.root, className)
      }, other));
    });
    true ? Radio.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * If `true`, the component is checked.
       */
      checked: import_prop_types2.default.bool,
      /**
       * The icon to display when the component is checked.
       * @default <RadioButtonIcon checked />
       */
      checkedIcon: import_prop_types2.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types2.default.object,
      /**
       * @ignore
       */
      className: import_prop_types2.default.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
       * @default 'primary'
       */
      color: import_prop_types2.default.oneOfType([import_prop_types2.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types2.default.string]),
      /**
       * If `true`, the component is disabled.
       */
      disabled: import_prop_types2.default.bool,
      /**
       * If `true`, the ripple effect is disabled.
       * @default false
       */
      disableRipple: import_prop_types2.default.bool,
      /**
       * The icon to display when the component is unchecked.
       * @default <RadioButtonIcon />
       */
      icon: import_prop_types2.default.node,
      /**
       * The id of the `input` element.
       */
      id: import_prop_types2.default.string,
      /**
       * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
       */
      inputProps: import_prop_types2.default.object,
      /**
       * Pass a ref to the `input` element.
       */
      inputRef: refType_default,
      /**
       * Name attribute of the `input` element.
       */
      name: import_prop_types2.default.string,
      /**
       * Callback fired when the state is changed.
       *
       * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
       * You can pull out the new value by accessing `event.target.value` (string).
       * You can pull out the new checked state by accessing `event.target.checked` (boolean).
       */
      onChange: import_prop_types2.default.func,
      /**
       * If `true`, the `input` element is required.
       * @default false
       */
      required: import_prop_types2.default.bool,
      /**
       * The size of the component.
       * `small` is equivalent to the dense radio styling.
       * @default 'medium'
       */
      size: import_prop_types2.default.oneOfType([import_prop_types2.default.oneOf(["medium", "small"]), import_prop_types2.default.string]),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types2.default.oneOfType([import_prop_types2.default.arrayOf(import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object, import_prop_types2.default.bool])), import_prop_types2.default.func, import_prop_types2.default.object]),
      /**
       * The value of the component. The DOM API casts this to a string.
       */
      value: import_prop_types2.default.any
    } : void 0;
    Radio_default = Radio;
  }
});

// node_modules/@mui/material/Radio/index.js
var init_Radio2 = __esm({
  "node_modules/@mui/material/Radio/index.js"() {
    init_Radio();
    init_radioClasses();
    init_radioClasses();
  }
});

export {
  getRadioUtilityClass,
  radioClasses_default,
  Radio_default,
  init_Radio2 as init_Radio
};
//# sourceMappingURL=chunk-6XT2OOHZ.js.map
