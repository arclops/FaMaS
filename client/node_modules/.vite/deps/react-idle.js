import {
  require_react
} from "./chunk-ZGRSIX2Q.js";
import {
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/react-idle/es/index.js
var import_react = __toESM(require_react());
var _class;
var _temp2;
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
  if (superClass)
    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}
var eventsChanged = function eventsChanged2(yeoldevents, yonnewevents) {
  return yeoldevents.sort().toString() !== yonnewevents.sort().toString();
};
var Idle = (_temp2 = _class = function(_Component) {
  _inherits(Idle2, _Component);
  function Idle2() {
    var _temp, _this, _ret;
    _classCallCheck(this, Idle2);
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {
      idle: _this.props.defaultIdle
    }, _this.timeout = null, _this.handleEvent = function() {
      if (_this.state.idle) {
        _this.handleChange(false);
      }
      clearTimeout(_this.timeout);
      _this.setTimeout();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }
  Idle2.prototype.componentDidMount = function componentDidMount() {
    this.attachEvents();
    this.setTimeout();
  };
  Idle2.prototype.componentWillUnmount = function componentWillUnmount() {
    this.removeEvents();
  };
  Idle2.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (eventsChanged(prevProps.events, this.props.events)) {
      this.removeEvents();
      this.attachEvents();
    }
  };
  Idle2.prototype.attachEvents = function attachEvents() {
    var _this2 = this;
    this.props.events.forEach(function(event) {
      window.addEventListener(event, _this2.handleEvent, true);
    });
  };
  Idle2.prototype.removeEvents = function removeEvents() {
    var _this3 = this;
    this.props.events.forEach(function(event) {
      window.removeEventListener(event, _this3.handleEvent);
    });
  };
  Idle2.prototype.handleChange = function handleChange(idle) {
    this.props.onChange({ idle });
    this.setState({ idle });
  };
  Idle2.prototype.setTimeout = function(_setTimeout) {
    function setTimeout2() {
      return _setTimeout.apply(this, arguments);
    }
    setTimeout2.toString = function() {
      return _setTimeout.toString();
    };
    return setTimeout2;
  }(function() {
    var _this4 = this;
    this.timeout = setTimeout(function() {
      _this4.handleChange(true);
    }, this.props.timeout);
  });
  Idle2.prototype.render = function render2() {
    return this.props.render(this.state);
  };
  return Idle2;
}(import_react.Component), _class.defaultProps = {
  defaultIdle: false,
  render: function render() {
    return null;
  },
  onChange: function onChange() {
  },
  timeout: 1e3,
  events: ["mousemove", "mousedown", "keydown", "touchstart", "scroll"]
}, _temp2);
export {
  Idle as default
};
//# sourceMappingURL=react-idle.js.map
