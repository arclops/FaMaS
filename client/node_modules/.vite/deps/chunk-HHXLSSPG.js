import {
  RadioGroupContext_default,
  init_RadioGroupContext,
  init_useRadioGroup
} from "./chunk-LISEKJQK.js";
import {
  FormGroup_default,
  init_FormGroup
} from "./chunk-MOXF7WQD.js";
import {
  init_useId,
  useId_default
} from "./chunk-KTRBC2DJ.js";
import {
  init_useControlled,
  useControlled_default
} from "./chunk-W6Z3MOBZ.js";
import {
  init_useForkRef,
  useForkRef_default
} from "./chunk-MFKBPDVK.js";
import {
  _objectWithoutPropertiesLoose,
  init_objectWithoutPropertiesLoose
} from "./chunk-L367Q5NJ.js";
import {
  _extends,
  init_extends
} from "./chunk-HMTWVGVS.js";
import {
  require_jsx_runtime
} from "./chunk-VTQ2JCVL.js";
import {
  require_prop_types
} from "./chunk-Z7SDHLGG.js";
import {
  require_react
} from "./chunk-ZGRSIX2Q.js";
import {
  __esm,
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/@mui/material/RadioGroup/RadioGroup.js
var React, import_prop_types, import_jsx_runtime, _excluded, RadioGroup, RadioGroup_default;
var init_RadioGroup = __esm({
  "node_modules/@mui/material/RadioGroup/RadioGroup.js"() {
    "use client";
    init_extends();
    init_objectWithoutPropertiesLoose();
    React = __toESM(require_react());
    import_prop_types = __toESM(require_prop_types());
    init_FormGroup();
    init_useForkRef();
    init_useControlled();
    init_RadioGroupContext();
    init_useId();
    import_jsx_runtime = __toESM(require_jsx_runtime());
    _excluded = ["actions", "children", "defaultValue", "name", "onChange", "value"];
    RadioGroup = React.forwardRef(function RadioGroup2(props, ref) {
      const {
        // private
        // eslint-disable-next-line react/prop-types
        actions,
        children,
        defaultValue,
        name: nameProp,
        onChange,
        value: valueProp
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
      const rootRef = React.useRef(null);
      const [value, setValueState] = useControlled_default({
        controlled: valueProp,
        default: defaultValue,
        name: "RadioGroup"
      });
      React.useImperativeHandle(actions, () => ({
        focus: () => {
          let input = rootRef.current.querySelector("input:not(:disabled):checked");
          if (!input) {
            input = rootRef.current.querySelector("input:not(:disabled)");
          }
          if (input) {
            input.focus();
          }
        }
      }), []);
      const handleRef = useForkRef_default(ref, rootRef);
      const name = useId_default(nameProp);
      const contextValue = React.useMemo(() => ({
        name,
        onChange(event) {
          setValueState(event.target.value);
          if (onChange) {
            onChange(event, event.target.value);
          }
        },
        value
      }), [name, onChange, setValueState, value]);
      return (0, import_jsx_runtime.jsx)(RadioGroupContext_default.Provider, {
        value: contextValue,
        children: (0, import_jsx_runtime.jsx)(FormGroup_default, _extends({
          role: "radiogroup",
          ref: handleRef
        }, other, {
          children
        }))
      });
    });
    true ? RadioGroup.propTypes = {
      // ----------------------------- Warning --------------------------------
      // | These PropTypes are generated from the TypeScript type definitions |
      // |     To update them edit the d.ts file and run "yarn proptypes"     |
      // ----------------------------------------------------------------------
      /**
       * The content of the component.
       */
      children: import_prop_types.default.node,
      /**
       * The default value. Use when the component is not controlled.
       */
      defaultValue: import_prop_types.default.any,
      /**
       * The name used to reference the value of the control.
       * If you don't provide this prop, it falls back to a randomly generated name.
       */
      name: import_prop_types.default.string,
      /**
       * Callback fired when a radio button is selected.
       *
       * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
       * @param {string} value The value of the selected radio button.
       * You can pull out the new value by accessing `event.target.value` (string).
       */
      onChange: import_prop_types.default.func,
      /**
       * Value of the selected radio button. The DOM API casts this to a string.
       */
      value: import_prop_types.default.any
    } : void 0;
    RadioGroup_default = RadioGroup;
  }
});

// node_modules/@mui/material/RadioGroup/index.js
var init_RadioGroup2 = __esm({
  "node_modules/@mui/material/RadioGroup/index.js"() {
    init_RadioGroup();
    init_useRadioGroup();
  }
});

export {
  RadioGroup_default,
  init_RadioGroup2 as init_RadioGroup
};
//# sourceMappingURL=chunk-HHXLSSPG.js.map
